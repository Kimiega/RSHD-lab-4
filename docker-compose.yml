services:

  primary:
    image: postgres:15-alpine
    container_name: ddb-postgres-primary
    ports:
      - "6666:5432"
    networks:
      - ddb-network
    volumes:
      - ddb-volume-primary:/data
      - ddb-volume-failover:/failover_dir
      - ./primary/postgresql.conf:/data/postgres/postgresql.conf
      - ./primary/falloc.sh:/script/falloc.sh
      - ./primary/ffree.sh:/script/ffree.sh
      - ./primary/start.sh:/script/start.sh
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: "md5\nhost replication all all md5"
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
      PGUSER: postgres
      PGPASSWORD: password
      PGDATA: /data/postgres
    command: postgres -c 'config_file=/data/postgres/postgresql.conf'
    depends_on:
      - filesystems
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  standby:
    image: postgres:15-alpine
    container_name: ddb-postgres-standby
    ports:
      - "7777:5432"
    networks:
      - ddb-network
    volumes:
      - ddb-volume-standby:/data/postgres
      - ddb-volume-failover:/failover_dir
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
      POSTGRES_PASSWORD: password
      PGUSER: postgres
      PGPASSWORD: password
      PGDATA: /data/postgres
    command: postgres -c 'config_file=/data/postgres/postgresql.conf'
    depends_on:
      primary:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  balancer:
    image: pgpool/pgpool:4.4.3
    container_name: ddb-pgpool
    ports:
      - "9999:9999"
    networks:
      - ddb-network
    environment:
      PG_USERNAME: postgres
      PG_PASSWORD: password
    volumes:
      - ddb-volume-failover:/failover_dir
      - ./balancer/pgpool.conf:/config/pgpool.conf
      - ./balancer/failover.sh:/script/failover.sh
    depends_on:
      primary:
        condition: service_healthy
      standby:
        condition: service_healthy

  filesystems:
    image: alpine
    container_name: ddb-filesystems
    command: tail -F anything
    volumes:
      - ddb-volume-primary:/primary
      - ddb-volume-standby:/replica
      - ddb-volume-failover:/failover

networks:
  ddb-network:
    driver: bridge

volumes:

  ddb-volume-primary:
    name: ddb-volume-primary
    driver: local
    driver_opts:
      o: "size=1g,uid=1000"
      device: tmpfs
      type: tmpfs

  ddb-volume-standby:
    name: ddb-volume-standby
    driver: local
    driver_opts:
      o: "size=1g,uid=1001"
      device: tmpfs
      type: tmpfs

  ddb-volume-failover:
    name: ddb-volume-failover
    driver: local
    driver_opts:
      o: "size=1m,uid=1002"
      device: tmpfs
      type: tmpfs
